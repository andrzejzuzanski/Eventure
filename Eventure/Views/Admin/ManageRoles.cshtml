@model Eventure.ViewModels.Admin.ManageUserRolesViewModel
@{
    ViewData["Title"] = $"Manage roles for {Model.UserName}";
}

<link rel="stylesheet" href="~/css/Admin/ManageRoles.css" />

<!-- Hero Section -->
<section class="hero-section">
    <div class="container">
        <div class="text-center">
            <h1 class="hero-title display-5">
                <i class="bi bi-person-gear hero-icon"></i>
                Manage roles for
                <span class="user-badge">
                    <i class="bi bi-person"></i>
                    @Model.UserName
                </span>
            </h1>
            <div class="accent-line"></div>
            <p class="hero-subtitle">Assign permissions for this user.</p>
        </div>
    </div>
</section>

<div class="roles-container">
    <form method="post" asp-action="ManageRoles">
        <div class="roles-form-card">
            <div class="card-header">
                <i class="bi bi-shield-check"></i>
                Available system roles
            </div>
            <div class="card-body">
                <input type="hidden" asp-for="UserId" />

                <div class="roles-grid">
                    @for (int i = 0; i < Model.Roles.Count; i++)
                    {
                        var roleClass = Model.Roles[i].RoleName.ToLower();
                        var isSelected = Model.Roles[i].IsSelected ? "selected" : "";

                        <div class="role-item @roleClass @isSelected">
                            <input type="hidden" asp-for="Roles[i].RoleName" />
                            <input asp-for="Roles[i].IsSelected" class="role-checkbox" id="role-@i" />
                            <label class="role-label" for="role-@i">
                                <div class="role-icon">
                                    @if (Model.Roles[i].RoleName == "Admin")
                                    {
                                        <i class="bi bi-shield-fill-exclamation"></i>
                                    }
                                    else if (Model.Roles[i].RoleName == "Moderator")
                                    {
                                        <i class="bi bi-shield-check"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-person"></i>
                                    }
                                </div>
                                <div class="role-info">
                                    <div class="role-name">@Model.Roles[i].RoleName</div>
                                    <div class="role-description">
                                        @if (Model.Roles[i].RoleName == "Admin")
                                        {
                                            @:Full access to all system features
                                        }
                                        else if (Model.Roles[i].RoleName == "Moderator")
                                        {
                                            @:Content moderation and event management
                                        }
                                        else
                                        {
                                            @:Standard platform user
                                        }
                                    </div>
                                </div>
                                <div class="role-checkbox-custom"></div>
                            </label>

                            <div class="role-permissions">
                                <div class="permissions-title">
                                    <i class="bi bi-key"></i>
                                    Privileges:
                                </div>
                                <ul class="permissions-list">
                                    @if (Model.Roles[i].RoleName == "Admin")
                                    {
                                        <li>Manage all users</li>
                                        <li>Remove any events</li>
                                        <li>Access to the admin panel</li>
                                        <li>User role management</li>
                                    }
                                    else if (Model.Roles[i].RoleName == "Moderator")
                                    {
                                        <li>Event content moderation</li>
                                        <li>Removing inappropriate comments</li>
                                        <li>Blocking users</li>
                                    }
                                    else
                                    {
                                        <li>Creating events</li>
                                        <li>Participation in events</li>
                                        <li>Adding comments</li>
                                        <li>Sending messages</li>
                                    }
                                </ul>
                            </div>
                        </div>
                    }
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn btn-save">
                        <i class="bi bi-check-circle"></i>
                        Save changes
                    </button>
                    <a asp-action="ManageUsers" class="btn btn-cancel">
                        <i class="bi bi-x-circle"></i>
                        Cancel
                    </a>
                </div>
            </div>
        </div>
    </form>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        document.documentElement.style.scrollBehavior = 'smooth';

        const roleItems = document.querySelectorAll('.role-item');
        const checkboxes = document.querySelectorAll('.role-checkbox');

        function updateRoleItemAppearance(roleItem, isChecked) {
            if (isChecked) {
                roleItem.classList.add('selected');
            } else {
                roleItem.classList.remove('selected');
            }
        }

        checkboxes.forEach((checkbox, index) => {
            const roleItem = roleItems[index];
            updateRoleItemAppearance(roleItem, checkbox.checked);

            checkbox.addEventListener('change', function() {
                updateRoleItemAppearance(roleItem, this.checked);

                roleItem.style.animation = 'roleToggle 0.3s ease';
                setTimeout(() => {
                    roleItem.style.animation = '';
                }, 300);
            });
        });

        roleItems.forEach(item => {
            item.addEventListener('mouseenter', function() {
                if (!this.classList.contains('selected')) {
                    this.style.transform = 'translateY(-4px) scale(1.01)';
                }
            });

            item.addEventListener('mouseleave', function() {
                if (!this.classList.contains('selected')) {
                    this.style.transform = '';
                }
            });
        });

        const form = document.querySelector('form');
        form.addEventListener('submit', function(e) {
            const checkedRoles = document.querySelectorAll('.role-checkbox:checked');
            const userName = '@Model.UserName';

            if (checkedRoles.length === 0) {
                e.preventDefault();
                alert('⚠️ Warning!\n\nYou must assign at least one role to the user.');
                return;
            }

            const adminRole = Array.from(checkedRoles).find(cb =>
                cb.closest('.role-item').classList.contains('admin')
            );

            if (adminRole) {
                if (!confirm(`🔐 Granting the Administrator role\n\nAre you sure you want to assign the user "${userName}" administrator privileges?\n\nThe user will have full access to the system!`)) {
                    e.preventDefault();
                    return;
                }
            }

            const roleNames = Array.from(checkedRoles).map(cb => {
                const roleItem = cb.closest('.role-item');
                return roleItem.querySelector('.role-name').textContent;
            });

            if (!confirm(`✅ Change confirmation\n\nAssigned roles for "${userName}":\n${roleNames.join(', ')}\n\nDo you want to save these changes?`)) {
                e.preventDefault();
            }
        });
    });
</script>