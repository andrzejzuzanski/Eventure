@using Eventure.Models
@using System.Security.Claims
@model List<Conversation>

@{
    ViewData["Title"] = "Messages";
    var currentUserId = User.FindFirstValue(ClaimTypes.NameIdentifier);
}

<link rel="stylesheet" href="~/css/messages/Index.css" />

<!-- Hero Section -->
<section class="hero-section">
    <div class="container">
        <div class="text-center">
            <h1 class="hero-title display-4">Messages</h1>
            <div class="accent-line"></div>
            <p class="hero-subtitle">Manage your conversations and stay in touch</p>
        </div>
    </div>
</section>

<div class="container">
    <div class="messages-container">
        @if (!Model.Any())
        {
            <div class="empty-state">
                <div class="icon">
                    <i class="bi bi-chat-dots"></i>
                </div>
                <h3>Brak wiadomości</h3>
                <p>You don't have any conversations yet. Start chatting with other event participants!</p>
            </div>
        }
        else
        {
            @foreach (var conversation in Model)
            {
                var otherParticipant = conversation.Participants.FirstOrDefault(p => p.UserId != currentUserId)?.User;
                var conversationTitle = otherParticipant != null ? otherParticipant.UserName : "Deleted user";
                bool hasUnread = conversation.Messages.Any(m => m.SenderId != currentUserId && !m.IsRead);
                var unreadClass = hasUnread ? "unread" : "";
                var avatarLetter = conversationTitle.Substring(0, 1).ToUpper();

                <a asp-action="Conversation" asp-route-id="@conversation.Id" class="conversation-card @unreadClass position-relative">
                    <div class="conversation-header">
                        <div class="user-avatar">
                            @avatarLetter
                        </div>
                        <div class="conversation-meta">
                            <div class="conversation-info">
                                <div class="conversation-title">
                                    Conversation with: @conversationTitle
                                    @if (hasUnread)
                                    {
                                        <span class="unread-badge">NEW</span>
                                    }
                                </div>
                                @if (conversation.Messages.Any())
                                {
                                    <div class="conversation-time">
                                        <i class="bi bi-clock me-1"></i>
                                        @conversation.Messages.Last().SentAt.ToString("g")
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="conversation-body">
                        @if (conversation.Messages.Any())
                        {
                            <p class="conversation-preview">@conversation.Messages.Last().Content</p>
                        }
                        else
                        {
                            <p class="conversation-preview empty">No messages in this conversation.</p>
                        }
                    </div>
                </a>
            }
        }
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        document.documentElement.style.scrollBehavior = 'smooth';

        const conversationCards = document.querySelectorAll('.conversation-card');
        conversationCards.forEach(card => {
            card.addEventListener('mouseenter', function() {
                this.style.transform = 'translateY(-4px) scale(1.02)';
            });

            card.addEventListener('mouseleave', function() {
                this.style.transform = 'translateY(0) scale(1)';
            });
        });
    });
</script>