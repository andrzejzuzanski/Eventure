@using Eventure.Models
@using System.Security.Claims
@model Conversation

@{
    var otherParticipant = Model.Participants.FirstOrDefault(p => p.UserId != User.FindFirstValue(ClaimTypes.NameIdentifier))?.User;
    ViewData["Title"] = otherParticipant != null ? $"Rozmowa z {otherParticipant.UserName}" : "Konwersacja";
}

<link rel="stylesheet" href="~/css/messages/Converstaion.css"/>

<div class="container">
    <!-- Chat Header -->
    <section class="chat-header">
        <div class="text-center">
            <h1 class="chat-title">@ViewData["Title"]</h1>
            <div class="accent-line"></div>
            <a asp-action="Index" class="back-button">
                <i class="bi bi-arrow-left"></i>
                Wróć do listy rozmów
            </a>
        </div>
    </section>

    <div class="chat-container-wrapper">
        <!-- Chat Messages -->
        <div class="chat-container" id="chatContainer">
            @if (!Model.Messages.Any())
            {
                <div class="empty-chat">
                    <i class="bi bi-chat-square-text"></i>
                    <p>Rozpocznij konwersację!</p>
                </div>
            }
            else
            {
                @foreach (var message in Model.Messages.OrderBy(m => m.SentAt))
                {
                    bool isCurrentUser = message.SenderId == User.FindFirstValue(ClaimTypes.NameIdentifier);
                    var messageClass = isCurrentUser ? "current-user" : "other-user";
                    var senderName = isCurrentUser ? "Ty" : message.Sender.UserName;
                    var avatarLetter = senderName.Substring(0, 1).ToUpper();

                    <div class="message-wrapper @messageClass">
                        <div class="d-flex @(isCurrentUser ? "justify-content-end" : "justify-content-start")">
                            <div class="@(isCurrentUser ? "order-2" : "order-1")">
                                <div class="message-header">
                                    @if (!isCurrentUser)
                                    {
                                        <div class="user-avatar">@avatarLetter</div>
                                    }
                                    <div class="message-sender">@senderName</div>
                                    @if (isCurrentUser)
                                    {
                                        <div class="user-avatar ms-2">@avatarLetter</div>
                                    }
                                </div>
                                <div class="message-bubble">
                                    <p class="message-content">@message.Content</p>
                                    <small class="message-time">
                                        <i class="bi bi-clock me-1"></i>
                                        @message.SentAt.ToLocalTime().ToString("g")
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

        <!-- Message Form -->
        <div class="message-form-container">
            <form id="sendMessageForm">
                <input type="hidden" name="conversationId" value="@Model.Id" />
                <div class="input-group">
                    <textarea id="messageInput" name="content" class="form-control message-input"
                              placeholder="Napisz wiadomość..." rows="3"></textarea>
                    <button type="submit" class="btn send-button ms-3">
                        <i class="bi bi-send"></i>
                        Wyślij
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const conversationId = "@Model.Id";
            const currentUserId = "@User.FindFirstValue(ClaimTypes.NameIdentifier)";
            const currentUserName = "@User.Identity.Name";
            const chatContainer = document.getElementById("chatContainer");

            // Scroll to bottom on load
            chatContainer.scrollTop = chatContainer.scrollHeight;

            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .build();

            connection.on("ReceiveMessage", function (message) {
                const isCurrentUser = message.senderName === currentUserName;
                appendMessage(message.content, message.senderName, message.sentAt, isCurrentUser);
            });

            connection.start().then(function () {
                console.log("SignalR Connected.");
                connection.invoke("JoinConversation", conversationId).catch(function (err) {
                    return console.error(err.toString());
                });
            }).catch(function (err) {
                return console.error(err.toString());
            });

            document.getElementById("sendMessageForm").addEventListener("submit", function (event) {
                event.preventDefault();

                const content = document.getElementById("messageInput").value;
                if (content.trim() === "") {
                    return;
                }

                // Add loading state
                const sendButton = document.querySelector('.send-button');
                const originalText = sendButton.innerHTML;
                sendButton.innerHTML = '<i class="bi bi-hourglass-split"></i> Wysyłanie...';
                sendButton.disabled = true;

                fetch('/Messages/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: `conversationId=${conversationId}&content=${encodeURIComponent(content)}`
                }).then(response => {
                    if (response.ok) {
                        document.getElementById("messageInput").value = "";
                        document.getElementById("messageInput").style.height = 'auto';
                    } else {
                        console.error("Failed to send message.");
                        alert('Wystąpił błąd podczas wysyłania wiadomości.');
                    }
                }).catch(error => {
                    console.error("Error sending message:", error);
                    alert('Wystąpił błąd podczas wysyłania wiadomości.');
                }).finally(() => {
                    // Reset button state
                    sendButton.innerHTML = originalText;
                    sendButton.disabled = false;
                });
            });

            function appendMessage(content, senderName, sentAt, isCurrentUser) {
                const messageClass = isCurrentUser ? "current-user" : "other-user";
                const avatarLetter = senderName.substring(0, 1).toUpperCase();
                const justifyClass = isCurrentUser ? "justify-content-end" : "justify-content-start";
                const orderClass = isCurrentUser ? "order-2" : "order-1";

                const messageWrapper = document.createElement("div");
                messageWrapper.className = `message-wrapper ${messageClass}`;

                messageWrapper.innerHTML = `
                    <div class="d-flex ${justifyClass}">
                        <div class="${orderClass}">
                            <div class="message-header">
                                ${!isCurrentUser ? `<div class="user-avatar">${avatarLetter}</div>` : ''}
                                <div class="message-sender">${senderName}</div>
                                ${isCurrentUser ? `<div class="user-avatar ms-2">${avatarLetter}</div>` : ''}
                            </div>
                            <div class="message-bubble">
                                <p class="message-content">${content}</p>
                                <small class="message-time">
                                    <i class="bi bi-clock me-1"></i>
                                    ${sentAt}
                                </small>
                            </div>
                        </div>
                    </div>`;

                chatContainer.appendChild(messageWrapper);
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }

            // Auto-resize textarea
            const messageInput = document.getElementById("messageInput");
            messageInput.addEventListener('input', function () {
                this.style.height = 'auto';
                this.style.height = Math.min(this.scrollHeight, 120) + 'px';
            });

            // Enter to send (Shift+Enter for new line)
            messageInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    document.getElementById("sendMessageForm").dispatchEvent(new Event('submit'));
                }
            });

            // Enhanced focus effects
            messageInput.addEventListener('focus', function() {
                this.parentElement.style.transform = 'scale(1.005)';
            });

            messageInput.addEventListener('blur', function() {
                this.parentElement.style.transform = 'scale(1)';
            });
        });
    </script>
}